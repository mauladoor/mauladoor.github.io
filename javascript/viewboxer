function getViewboxes(xstart, ystart, xiv, yiv, xgap, ygap, xrnge, yrnge, borders) {

    let cnt = 0;
    let x = xstart;
    let y = ystart;
    let viewboxhtml = [];

    do {
        do {
            viewboxhtml.push(`${x} ${y} ${xiv} ${yiv}`);
            x += xgap + xiv;

            cnt++;
        }while( x + borders < xrnge)

            x = xstart;
            y += yiv + ygap;

    } while (y + borders < yrnge)
    return viewboxhtml;
}

  /* what requires scope is the timeout var, which carries over each execution of the debounce call because the variable has a lifetime until the function ends.
  what requires async is the setTimeout which allows the debounce to be called while the timer is going. */
  // Originally inspired by  David Walsh (https://davidwalsh.name/javascript-debounce-function)

// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// `wait` milliseconds.
const debounce = (func, wait) => {
    let timeout;
  
    // This is the function that is returned and will be executed many times
    // We spread (...args) to capture any number of parameters we want to pass
    return function executedFunction(...args) {
  
      // The callback function to be executed after 
      // the debounce time has elapsed
      const later = () => {
        // null timeout to indicate the debounce ended
        timeout = null;
        
        // Execute the callback
        func(...args);
      };
      // This will reset the waiting every function execution.
      // This is the step that prevents the function from
      // being executed because it will never reach the 
      // inside of the previous setTimeout  
      clearTimeout(timeout);
      
      // Restart the debounce waiting period.
      // setTimeout returns a truthy value (it differs in web vs Node)
      timeout = setTimeout(later, wait);
    };
  };